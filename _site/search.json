[
  {
    "objectID": "exercice_1.html",
    "href": "exercice_1.html",
    "title": "Exercice 1 : Débuter avec R",
    "section": "",
    "text": "1 Débuter avec R\n\nOuvrir R et créer un nouveau script R.\nEnregistrer ce nouveau fichier dans un dossier puis vérifier que le fichier est bien enregistré.\nFermer R puis ouvrir à nouveau votre fichier. Un programme R est suffixé par .R.\nInstaller et charger le package dplyr avec la fonction library.\n\n\nCode\ninstall.packages(\"dplyr\") # Installation du package\nlibrary(\"dplyr\") # Chargement du package\n\n\nVérifier la bonne installation et le bon chargement du package à l’aide des informations de la console ou des commandes library() et search().\n\n\nCode\nlibrary() # Permet de connaitre les packages installés\nsearch() # Permet de connaitre  les packages chargés\n\n\n\n\n\n\n2 Créer des objets\n\nAssigner à x la valeur 5, vérifier que ceci a bien été fait à l’aide de la console ou de l’environnement.\n\n\nCode\nx <- 5 # assigne à x la valeur 5\nx # Affiche la valeur de x \n\n\n\nLorsque l’on créé des objets, on va toujours leur assigner un nom, ceci permet de les garder en mémoire. On peut ensuite retrouver ses objets dans l’environnement. Pour tous les nouveaux que nous allons créer, vous devrez leur assigner un nom.\n\nCréer un vecteur de 5 prénoms nommé vec_prenom avec c().\n\n\nCode\nvec_prenom <- c(\"prenom_1\", \"prenom_2\", \"prenom_3\", \"prenom_4\", \"prenom_5\") # Création d'un vecteur \n\n\nCréer une liste de 5 prénoms nommée liste_prenom avec list().\n\n\nCode\nliste_prenom <- list(\"prenom_1\", \"prenom_2\", \"prenom_3\", \"prenom_4\", \"prenom_5\") # Création d'une liste \n\n\nCréer une matrice avec 2 ligne et 3 colonne rempli de nombre avec matrix.\n\n\nCode\nmatrice <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)\n\n\nCréer un vecteur de nombre allant de 1 à 20 par pas de 2 à l’aide de la fonction seq().\n\n\nCode\nvec_1_20 <- c(seq(from = 1, to = 20, by =2))\n\n\n\n\n\n\n3 Les dataframes\n\nCréer un dataframe nommé df avec 3 lignes et 2 colonnes prenom et age avec la fonction data.frame(). Remplir les variables avec les valeurs de votre choix.\n\n\nCode\ndf <- data.frame(prenom = c(\"prenom_1\",\"prenom_2\",\"prenom_3\"),\n             age = c(52,25,10))\n\n\nAnalyser la classe et le type des objets que l’on vient de créer avec la fonction str().\n\n\nCode\nstr(object = df) # Permet de connaitre la structure d'un objet\ntypeof(df) # Permet de connaitre le type d'un objet \n\n\nConnaitre le nom des colonnes du dataframe avec colnames(), le nombre de ligne avec nrow(), de colonne avec ncol().\n\n\nCode\ncolnames(df) # Permet de connaitre la structure d'un objet\nnrow(df) # Permet de connaitre le type d'un objet \nncol(df)\n\n\nAfficher les valeurs de la variable prenom du dataframe créé avec $.\n\n\nCode\ndf$prenom # Connaitre les valeurs de la variable prenom\n\n\nRécupérer le vecteur prenom à partir du dataframe.\n\n\nCode\nc(df$prenom) # Récupérer le vecteur prenom à partir du dataframe\n\n\n\n\n\n\n4 Changer le type d’un objet\n\nPasser d’une liste à un vecteur avec unlist() et d’un vecteur à une liste avec as.list().\n\n\nCode\ndelister <- unlist(liste_prenom)\nlister <- as.list(vec_prenom) # Passer à un type liste\n\n\nPasser d’une matrice à un dataframe avec as.data.frame().\n\n\nCode\ndataframer <- as.data.frame(matrice) # Passer à un dataframe\n\n\n\n\n\n\n5 Nettoyer son environnement\n\nSupprimer les objets que l’on vient de créer à l’aide de rm(). Les objets sont supprimés de l’environnement.\n\n\nCode\nrm(df) # Permet de supprimer de son environnement le dataframe df\n\n\nLibérer sa mémoire à l’aide de la fonction gc(). Ceci permet de libérer de la mémoire lorsque l’on travaille avec des bases volumineuses.\n\n\nCode\ngc() # Permet de libérer la mémoire inutilisée\n\n\n\n\n\n\n6 Connaitre son dataframe\nOn va utiliser ici le dataframe iris qui est disponible en libre accès depuis R. Il suffit de taper iris dans R pour le voir apparaitre. On va donc l’assigner à un nom pour le garder en mémoire et pouvoir faire nos manipulations sur celui-ci.\n\n\n\n\n\n\nDataframe iris\n\n\n\n\n\n\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n\n\n\n\n\n\nAssigner la table iris au nom df_iris.\n\n\nCode\ndf_iris <- iris # Assigner iris au nom df_iris\n\n\nSe renseigner sur l’objet iris :\n\n\nLe type de l’objet avec typeof()\nLe nom des variables avec colnames()\nLe type de variable avec str()\n\n\nCode\ntypeof(df_iris) # Type de l'objet\ncolnames(df_iris) # Nom des variables\nstr(df_iris) # Nombre d'observations = nombre de lignes\n\n\n\n\nConnaitre le nombre de lignes avec nrow(), de colonnes avec ncol(), d’observations avec count().\n\n\nCode\nncol(df_iris) # Nombre de colonnes\nnrow(df_iris) # Nombre de lignes\ncount(df_iris) # Nombre d'observations = nombre de lignes\n\n\nConnaitre les modalités de la variable Species à l’aide de la fonction unique(). On cherche à avoir les modalités distinctes ici.\n\n\nCode\nunique(df_iris$Species) # Permet d'obtenir les modalités distinctes de la variable Species\n\n\n\n\n\n\n7 Manipuler son dataframe\nOn va désormais utiliser les pipes (`%>%``) pour manipuler et transformer ses données. A chaque question, vous devez créer un nouvel objet auquel vous assignez un nom.\n\nA l’aide d’un pipe (%>%) et de la fonction select(), créer un dataframe avec une seule variable du dataframe iris.\n\n\nCode\ndf_1_variable <- df_iris %>% \n  select(Species)\n\n\nA l’aide d’un pipe (%>%) et de la fonction mutate(), créer une variable correspondant à la somme des variables Sepal.Length et Sepal.Width.\n\n\nCode\ndf_somme_iris <- df_iris %>% \n  mutate(somme = Sepal.Length + Sepal.Width)\n\n\nA l’aide d’un pipe (%>%) et de la fonction filter(), garder uniquement les observations pour lesquelles Petal.Width est supérieur à 0.2.\n\n\nCode\ndf_grande_petale <- df_iris %>% \n  filter(Petal.Width > 0.2) # Garder uniquement les lignes où Petal.Width > 0.2 \n\n\nA l’aide d’un pipe (%>%) et de la fonction rename(), renommer la variableSpeciesparespece`.\n\n\nCode\ndf_renomme <- df_iris %>% \n  rename(espece = Species) # Renommer la variable Species par espece\n\n\nA l’aide d’un pipe (%>%) et de la fonction mutate(), passer la variable Sepal.Length au format caractère.\n\n\nCode\ndf_sepal_char <- df_iris %>% \n  mutate(Sepal.Length = as.character(Sepal.Length)) # Passer la variable Sepal.Length au format caractère\n\n\nA l’aide d’un pipe (%>%) et de la fonction arrange(), trier le dataframe en fonction de Sepal.Length.\n\n\nCode\ndf_sepal_tri <- df_iris %>% \n  arrange(Sepal.Length) # Trier le dataframe en fonction de la variable Sepal.Length\n\n\n\n\n\n\n8 Enchainer les pipes\n\nEn partant du dataframe iris, créer un dataframe nommé df_pipe en enchaînant les étapes ci-dessous.\n\nGarder uniquement les observations pour les Species setosa et versicolor\nRenommer la variable Petal.Length par longueur_petale\nCréer la variable long_large correspondant au produit de Sepal.Length et Sepal.Width\nRetirer la variable Petal.Width\nTrier en fonction de longueur_petale\n\n\n\nCode\ndf_pipe <- iris %>% \n  filter(Species %in% c(\"setosa\", \"versicolor\")) %>% \n  rename(longueur_petale = Petal.Length) %>% \n  mutate(long_large = Sepal.Length * Sepal.Width) %>% \n  select(-Petal.Width) %>% \n  arrange(longueur_petale)\n\n\nEn partant du dataframe iris, créer un dataframe nommé df_final en enchaînant les étapes ci-dessous.\n\nRenommer les variables pour qu’elles soient en minuscules avec les fonctions rename_all() et tolower()\nNe garder que les observations pour lesquelles Sepal.Length est différent de 5.8\nCréer une variable oui_non égale à 1 lorsque Sepal.Width égale à 3.5 et 0 sinon à l’aide de la fonction ifelse()\n\n\n\nCode\ndf_final <- iris %>%\n  rename_all(tolower) %>% \n  filter(sepal.length != 5.8) %>% \n  mutate(oui_non = ifelse(sepal.width == 3.5, 1, 0))\n\n\nEnregister son fichier, nettoyer son environnement et passer à l’exercice 2."
  }
]