---
title: "Exercice 4 : Pour aller plus loin"

code-fold: true
#code-tools: true

toc: true
toc-expand: 2
toc-depth: 2
number-sections: true

theme :
  light: flatly
  dark: darkly
---

Nous avons vu précédemment comment importer, traiter et résumer ses données. 

# Créer un R projet

Travailler via un R project est une bonne pratique, cela permet également de faciliter l'accès à des dossiers puisque la racine est définie par l'emplacement du R project. 

1.  Créer un R project et l'enregistrer.

2.  Connaitre où se situe la racine du projet grace à `getwd()`.
    ```{r, eval=FALSE, echo=TRUE}
getwd() # Permet de connaitre la racine du working directory
    ```

3.  Installer si besoin et charger les packages `dplyr`, `haven`, `tidyr`, `lubridate` et `ggplot2`.
    ```{r, eval=FALSE, echo=TRUE}
# install.packages(haven) 
library(haven) 
library(lubridate)
library(ggplot2)
library(dplyr)
library(tidyr)
    ```

---

# Importer des données SAS sur les demandeurs d'emploi
Les fichiers SAS sont encore nombreux au sein du SSP, nous allons donc voir comment traiter ces données. 

1.  Importer les données SAS du nombre de demandeurs d'emploi via la fonction `read_sas()` du package `haven`. 
    ```{r, eval=FALSE, echo=TRUE}
defm <- read_sas("defm_trim.sas7bdat")
    ```

2.  Changer le format de la date pour le passer au format `Date`, attention à l'origine des dates.  
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(Date = as.Date(Date, origin = "1960-01-01"))
    ```

::: {.callout-tip collapse="true"}
## L'origine des dates
  -   En SAS, la date de référence d'une date est le 1er janvier 1950
  -   En R, la date de référence d'une date est le 1er janvier 1960

Lorsque l'on importe un fichier SAS en R, il faut donc bien préciser l'origine de la date dans la fonction `as.Date(x, origin = "1960-01-01")`. 
:::


---

# Manipuler les dates

1.  Créer une nouvelle variable prenant pour valeur le premier jour du premier mois du trimestre plutôt que le premier jour du dernier mois via la fonction `months()`.  
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(deb_trimestre = date - months(2))
    ```

2.  Calculer l'écart entre les 2 dates en jours, puis en semaines via la fonction `difftime()`.  
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(diff_jour = difftime(date, deb_trimestre, units = "days"),
               diff_week = difftime(date, deb_trimestre, units = "weeks"))
    ```

3.  Calculer la date de fin de trimestre.  
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(fin_trim = (date + months(1)) - 1)
    ```
    
4.  Créer une variable indiquant le trimestre via la fonction `quarter()`. 
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(trim = quarter(date))
    ``` 
    
5.  Recréer la variable trimestre au format "2016-T1". 
    ```{r, eval=FALSE, echo=TRUE}
... %>% mutate(trim = quarter(date))
    ```  
   
---


# Visualisation graphique
Des bibliothèques graphiques sont à disposition ([r-graph-gallery](https://r-graph-gallery.com/) ou [r-charts](https://r-charts.com/)) pour trouver des templates de visualisation et le code associé. 

1.  Créer un graphique simple avec la date et le nombre de demandeurs d'emploi en utilisant la fonction `plot()`
    ```{r, eval=FALSE, echo=TRUE}
plot(defm$date, defm$defmA)
    ``` 

2.  Créer une ligne simple avec la date et le nombre de demandeurs d'emploi en utilisant la fonction `ggplot()`
    ```{r, eval=FALSE, echo=TRUE}
ggplot(defm, aes(x=date, y=defmA)) +
  geom_line()
    ``` 

2.  Ajouter un titre avec `ggtitle()`.
    ```{r, eval=FALSE, echo=TRUE}
ggplot(defm, aes(x=date, y=defmA)) +
  geom_line()+
  ggtitle("Titre")
    ``` 

3.  Ajouter une seconde courbe, par exemple celle de l'ensemble des demandeurs d'emploi inscrits en catégories A, B ou C.
    ```{r, eval=FALSE, echo=TRUE}
ggplot(defm) +
  geom_line(aes(x=date, y=defmA))+
  geom_line(aes(x=date, y=defmABC))+
  ggtitle("Titre")
    ``` 

4.  Créer un barlpot avec la spécification `geom_bar()`.
    ```{r, eval=FALSE, echo=TRUE}
ggplot(defm, aes(x=date, y=defmA)) + 
  geom_bar(stat = "identity")
    ``` 

5.  Créer un histograme avec la spécification `geom_histogram()`.
    ```{r, eval=FALSE, echo=TRUE}
ggplot(defm, aes(x=defmA)) +
  geom_histogram()
    ``` 


