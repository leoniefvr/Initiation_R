{"title":"Exercice 1 : Débuter avec R","markdown":{"yaml":{"title":"Exercice 1 : Débuter avec R","code-fold":true,"toc":true,"toc-expand":2,"toc-depth":2,"number-sections":true,"theme":{"light":"flatly","dark":"darkly"}},"headingText":"Débuter avec R","containsRefs":false,"markdown":"\n\n---\n\n\n1.  Ouvrir R et créer un nouveau script R.\n\n2.  Enregistrer ce nouveau fichier dans un dossier puis vérifier que le fichier est bien enregistré.\n\n3.  Fermer R puis rouvrez votre fichier. Un programme R est suffixé par `.R`.\n\n4.  Installer et charger le package `dplyr` avec la fonction `library`.\n    ```{r, eval=FALSE, echo=TRUE}\n    install.packages(\"dplyr\") # Installation du packages\n    library(\"dplyr\") # Chargement du packages\n    ```\n\n5.  Vérifier la bonne installation et le bon chargement du package à l'aide des informations de la console ou des commandes     `library()` et `search()`.\n    ```{r, eval=FALSE, echo=TRUE}\n    library() # Permet de connaitre les packages installés\n    search() # Permet de connaitre  les packages chargés\n    ```\n\n---\n\n# Créer des objets\n\n1.  Assigner à `x` la valeur `5`, vérifier que ceci a bien été fait à l'aide de la console ou de l'environnement.\n    ```{r, eval=FALSE, echo=TRUE}\n    x <- 5 # assigne à x la valeur 5\n    x # Affiche la valeur de x \n    ```\n\nLorsque l'on créé des objets, on va toujours leur assigner un nom, ceci permet de les garder en mémoire. On peut ensuite retrouver ses objets dans l'environnement. Pour tous les nouveaux que nous allons créer, vous devrez leur assigner un nom. \n\n2.  Créer un vecteur de 5 prénoms nommé `vec_prenom` avec `c()`.\n    ```{r, eval=FALSE, echo=TRUE}\n    vec_prenom <- c(\"prenom_1\", \"prenom_2\", \"prenom_3\", \"prenom_4\", \"prenom_5\") # Création d'un vecteur \n    ```\n\n3.  Créer une liste de 5 prénoms nommée `liste_prenom` avec `list()`.\n    ```{r, eval=FALSE, echo=TRUE}\n    liste_prenom <- list(\"prenom_1\", \"prenom_2\", \"prenom_3\", \"prenom_4\", \"prenom_5\") # Création d'une liste \n    ```\n\n4.  Créer une matrice avec 2 ligne et 3 colonne rempli de nombre avec `matrix`.\n    ```{r, eval=FALSE, echo=TRUE}\nmatrice <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)\n    ```\n\n5.  Créer un vecteur de nombre allant de 1 à 20 par pas de 2 à l'aide de la fonction `seq()`.\n    ```{r, eval=FALSE, echo=TRUE}\nvec_1_20 <- c(seq(from = 1, to = 20, by =2))\n    ```\n\n---\n\n# Les dataframes\n\n1.  Créer un dataframe nommé `df` avec 3 lignes et 2 colonnes `prenom` et `age` avec la fonction `data.frame()`. Remplir les variables avec les valeurs de votre choix.\n    ```{r, eval=FALSE, echo=TRUE}\ndf <- data.frame(prenom = c(\"prenom_1\",\"prenom_2\",\"prenom_3\"),\n                 age = c(52,25,10))\n    ```\n\n2.  Analyser la classe et le type des objets que l'on vient de créer avec la fonction `str()`.\n    ```{r, eval=FALSE, echo=TRUE}\nstr(object = df) # Permet de connaitre la structure d'un objet\ntypeof(df) # Permet de connaitre le type d'un objet \n    ```\n\n3.  Connaitre le nom des colonnes du dataframe avec `colnames()`, le nombre de ligne avec `nrow()`, de colonne avec `ncol()`. \n    ```{r, eval=FALSE, echo=TRUE}\ncolnames(df) # Permet de connaitre la structure d'un objet\nnrow(df) # Permet de connaitre le type d'un objet \nncol(df)\n    ```\n\n4.  Afficher les valeurs de la variable `prenom` du dataframe créé avec `$`. \n    ```{r, eval=FALSE, echo=TRUE}\ndf$prenom # Connaitre les valeurs de la variable prenom\n    ```\n\n5.  Récupérer le vecteur `prenom` à partir du dataframe. \n    ```{r, eval=FALSE, echo=TRUE}\nc(df$prenom) # Récupérer le vecteur prenom à partir du dataframe\n    ```\n\n---\n    \n# Changer le type d'un objet     \n    \n1.  Passer d'une liste à un vecteur avec `unlist()` et d'un vecteur à une liste avec `as.list()`. \n    ```{r, eval=FALSE, echo=TRUE}\ndelister <- unlist(liste_prenom)\nlister <- as.list(vec_prenom) # Passer à un type liste\n    ```\n\n2.  Passer d'une matrice à un dataframe avec `as.data.frame()`. \n    ```{r, eval=FALSE, echo=TRUE}\ndataframer <- as.data.frame(matrice) # Passer à un dataframe\n    ```\n    \n---\n\n# Nettoyer son environnement\n\n1.  Supprimer les objets que l'on vient de créer à l'aide de `rm()`. Les objets sont supprimés de l'environnement.\n    ```{r, eval=FALSE, echo=TRUE}\nrm(df) # Permet de supprimer de son environnement le dataframe df\n    ```\n    \n2.  Libérer sa mémoire à l'aide de la fonction `gc()`. Ceci permet de libérer de la mémoire lorsque l'on travaille avec des bases volumineuses. \n    ```{r, eval=FALSE, echo=TRUE}\ngc() # Permet de libérer la mémoire inutilisée\n    ```\n\n---\n\n# Connaitre son dataframe\n\nOn va utiliser ici le dataframe `iris` qui est disponible en libre accès depuis R. Il suffit de taper iris dans R pour le voir apparaitre. On va donc l'assigner à un nom pour le garder en mémoire et pouvoir faire nos manipulations sur celui-ci. \n\n::: {.callout-tip collapse=\"true\"}\n## Dataframe iris\n```{r, echo=FALSE}\nhead(iris,n=5)\n```\n:::\n\n1.  Assigner la table `iris` au nom `df_iris`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_iris <- iris # Assigner iris au nom df_iris\n    ```\n\n2.  Se renseigner sur l'objet iris :\n\n-   Le type de l'objet avec `typeof()`\n-   Le nom des variables avec `colnames()`\n-   Le type de variable avec `str()`\n    ```{r, eval=FALSE, echo=TRUE}\ntypeof(df_iris) # Nombre de colonne\ncolnames(df_iris) # Nombre de ligne\nstr(df_iris) # Nombre d'observation = nombre de ligne\n    ```\n\n3.  Connaitre le nombre de lignes avec `nrow()`, de colonnes avec `ncol()`, d'observations avec `count()`.\n    ```{r, eval=FALSE, echo=TRUE}\nncol(df_iris) # Nombre de colonnes\nnrow(df_iris) # Nombre de lignes\ncount(df_iris) # Nombre d'observations = nombre de lignes\n    ```\n\n4.  Connaitre les modalités de la variable `Species` à l'aide de la fonction `unique()`. On cherche à avoir les modalités distinctes ici.\n    ```{r, eval=FALSE, echo=TRUE}\nunique(df_iris$Species) # Permet d'obtenir les modalités distinctes de la variable Species\n    ```\n\n\n---\n\n# Manipuler son dataframe\n\nOn va désormais utiliser les `pipes` (`%>%``) pour manipuler et transformer ses données. A chaque question, vous devez créer un nouvel objet auquel vous assignez un nom. \n\n1.  A l'aide d'un `pipe` (`%>%`) et de la fonction `select()`, créer un dataframe avec une seule variable du dataframe `iris`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_1_variable <- df_iris %>% \n      select(Species)\n    ```\n\n2.  A l'aide d'un `pipe` (`%>%`) et de la fonction `mutate()`, créer une variable correspondant à la somme des variables `Sepal.Length` et `Sepal.Width`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_somme_iris <- df_iris %>% \n      mutate(somme = Sepal.Length + Sepal.Width)\n    ```\n\n3.  A l'aide d'un `pipe` (`%>%`) et de la fonction `filter()`, garder uniquement les observations pour lesquelles `Petal.Width` est supérieur à `0.2`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_grande_petale <- df_iris %>% \n      filter(Petal.Width > 0.2) # Garder uniquement les lignes où Petal.Width > 0.2 \n    ```\n\n4.  A l'aide d'un `pipe` (`%>%`) et de la fonction `rename`()`, renommer la variable `Species` par `espece`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_renomme <- df_iris %>% \n      rename(espece = Species) # Renommer la variable Species par espece\n    ```\n\n5.  A l'aide d'un `pipe` (`%>%`) et de la fonction `mutate()`, passer la variable `Sepal.Length` au format caractère.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_sepal_char <- df_iris %>% \n      mutate(Sepal.Length = as.character(Sepal.Length)) # Passer la variable Sepal.Length\n    ```\n\n6.  A l'aide d'un `pipe` (`%>%`) et de la fonction `arrange()`, trier le dataframe en fonction de `Sepal.Length`.\n    ```{r, eval=FALSE, echo=TRUE}\ndf_sepal_tri <- df_iris %>% \n      arrange(Sepal.Length) # Trier le dataframe en fonction de la variable Sepal.Length\n    ```\n\n---\n\n# Enchainer les pipes\n\n1.  En partant du dataframe iris, créer un dataframe nommé `df_pipe` en enchaînant les étapes ci-dessous.\n\n    -   Garder uniquement les observations pour les `Species` `setosa` et `versicolor`\n    -   Renommer la variable `Petal.Length` par `longueur_petale`\n    -   créer la variable `long_large` correspondant au produit de `Sepal.Length` et `Sepal.Width`\n    -   Retirer la variable `Petal.Width`\n    -   Trier en fonction de `longueur_petale`\n\n    ```{r, eval=FALSE, echo=TRUE}\n    df_pipe <- iris %>% \n      filter(Species %in% c(\"setosa\", \"versicolor\")) %>% \n      rename(longueur_petale = Petal.Length) %>% \n      mutate(long_large = Sepal.Length * Sepal.Width) %>% \n      select(-Petal.Width) %>% \n      arrange(longueur_petale)\n    ```\n\n2.  En partant du dataframe iris, créer un dataframe nommé `df_final` en enchaînant les étapes ci-dessous.\n\n    -   Renommer les variables pour qu'elles soient en minuscules avec les fonctions `rename_all()` et `tolower()`\n    -   Ne garder que les observations pour lesquelles `Sepal.Length` est différent de `5.8`\n    -   Créer une variable `oui_non` égale à 1 lorsque `Sepal.Width` égale à `3.5` et 0 sinon à l'aide de la fonction `ifelse()`\n\n    ```{r, eval=FALSE, echo=TRUE}\n    df_final <- iris %>%\n      rename_all(tolower) %>% \n      filter(sepal.length != 5.8) %>% \n      mutate(oui_non = ifelse(sepal.width == 3.5, 1, 0))\n      \n    ```\n\n6.  Enregister son fichier, nettoyer son environnement et passer à l'exercice 2.\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"output-file":"exercice_1.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","theme":{"light":"flatly","dark":"darkly"},"code-copy":true,"title":"Exercice 1 : Débuter avec R","toc-expand":2},"extensions":{"book":{"multiFile":true}}}}}